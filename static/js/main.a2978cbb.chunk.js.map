{"version":3,"sources":["images/logo.svg","images/arrow.svg","images/darrow.svg","images/bank.svg","images/community.svg","images/ttt.svg","images/link.svg","images/book.svg","images/theme.svg","images/train head.svg","images/train cart1.svg","images/train cart3.svg","images/sortA.svg","images/sortN.svg","images/eye.svg","images/sum.svg","serviceWorker.js","context/ThemeContext.js","components/Home.js","components/pagenav.js","scripts/account.js","containers/bank.js","scripts/city.js","scripts/netcomm.js","containers/location.js","components/Square.js","components/Board.js","containers/Game.js","components/linkednode.js","scripts/linkedlist.js","containers/list.js","components/stackable.js","scripts/linearobj.js","containers/linear.js","containers/controller.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","themes","light","foreground","background","btnFG","btnBG","container","fill","stack","nstack","navb","navicon","navt","glow","zone","panel1","panel2","card","cardbox","selectSelf","selectChd","activefill","activeSelf","dark","ThemeContext","React","createContext","App","themeCSS","useContext","className","src","logo","alt","selector","class","href","target","rel","NavHeader","this","context","id","props","applabel","credential","currentController","warninglabel","Component","contextType","NavFooter","type","himg","disabled","on","onClick","bimg","cimg","timg","limg","simg","thimg","Account","accountName","startingBalance","amount","Number","AccountController","accountHolder","accounts","push","i","length","splice","accountRename","isExisting","findIndex","element","array","reduce","total","currentAcct","max","Math","min","Bank","state","currentAccount","user","list","inputAmt","key","otheme","holder","cards","addCard","setState","e","createAccount","removeAccount","renameAccount","sumBalance","maxBalance","minBalance","value","onChange","inputChg","deposit","withdraw","balance","randAccount","getAttribute","msg","shift","name","update","cardClick","acct","slice","isAdd","maxTry","isNameExisting","add_account","round","random","alert","prompt","remove_account","filter","replace","rename_account","renderList","sum_balance","max_balance","min_balance","index","return_index","City","latitude","longitude","population","headcount","Community","citys","city","find","currentCity","cityName","settlementName","functions","getData","url","fetch","response","json","data","console","error","postData","method","mode","cache","credentials","headers","redirect","referrer","body","JSON","stringify","status","statusText","putData","Demographics","community","cacheCitys","place","createSettlement","deleteSettlement","showSphere","sumPopulation","showMostNorthern","showMostSouthern","movedIn","movedOut","howBig","randSettlement","webdata","locCache","NET","Error","message","createCity","latlng","deleteCity","whichSphere","getPopulation","getMostNorthern","getMostSouthern","Square","Board","squares","renderSquare","Game","history","Array","stepNumber","xIsNext","AIon","newhistory","newstepNum","nextPlayer","calculateWinner","AImove","isPlayerX","AImoveIndex","produceRandomMove","produceBestMove","applyAI","concat","step","temp","current","winner","moves","map","move","desc","jumpTo","difficulty","switchMode","switchAI","turnAIswitch","clear","clearGame","handleClick","bestscore","Infinity","forEach","square","sim_squares","score","minmax","isNextMax","scores","X","O","Draw","returnResult","best","lines","a","b","c","includes","nodecss","subject","trainh","trcss","trainc1","traint","ListNode","forwardNode","backwardNode","LinkedList","head","tail","size","node","next","prev","isNumber","utility","mergeSort","source","heads","frontBackSplit","front","back","sortedMerge","result","fast","slow","List","useState","LL","train","setTrain","setAmount","setSubject","setSize","capMsg","setCapMsg","display","setDisplay","randomInput","rand","rand2","renderTrain","useCallback","newtrain","showHandler","show","useEffect","insert","style","color","delete","eye","showtotal","sum","first","darrow","last","arrow","previous","sort","sortN","sortA","unique","LIFO","Linked","FIFO","Linear","ssize","setSsize","qsize","setQsize","LI","setStack","queue","setQueue","dqueue","setDqueue","sobj","setSOBJ","qobj","setQOBJ","isNews","setIsNewS","isNewq","setIsNewQ","renderStack","linearobj","prop","renderQueue","sub","amt","pop","dq","enqueue","enqueueHandler","q","dequeue","unshift","dequeueHandler","AppsController","toggleTheme","activeTheme","activeApp","activePage","app","page","Provider","pageClick","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a2978cbb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.7b49881b.svg\";","module.exports = __webpack_public_path__ + \"static/media/darrow.38c8fc26.svg\";","module.exports = __webpack_public_path__ + \"static/media/bank.cf45bd43.svg\";","module.exports = __webpack_public_path__ + \"static/media/community.22c7a61d.svg\";","module.exports = __webpack_public_path__ + \"static/media/ttt.02ccedf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/link.e98a5f40.svg\";","module.exports = __webpack_public_path__ + \"static/media/book.4d9b8bfc.svg\";","module.exports = __webpack_public_path__ + \"static/media/theme.9bf9c5d3.svg\";","module.exports = __webpack_public_path__ + \"static/media/train head.a6383c83.svg\";","module.exports = __webpack_public_path__ + \"static/media/train cart1.3db6c7bf.svg\";","module.exports = __webpack_public_path__ + \"static/media/train cart3.e64399e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/sortA.c3fd1ab0.svg\";","module.exports = __webpack_public_path__ + \"static/media/sortN.d16f319e.svg\";","module.exports = __webpack_public_path__ + \"static/media/eye.acda77e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/sum.a1ba3285.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport const themes = {\r\n    light: {\r\n      foreground: 'ThemeLightFG',\r\n      background: 'ThemeLightBG',\r\n      btnFG: 'ThemeLightBtnFG',\r\n      btnBG: 'ThemeLightBtnBG',\r\n      container: 'ThemeLightBox',\r\n      fill: 'ThemeLightFill',\r\n      stack: 'ThemeLightStack',\r\n      nstack: 'ThemeLightNstack',      \r\n      navb: 'ThemeLightNavb',\r\n      navicon: 'ThemeLightNavIcon',\r\n      navt: 'ThemeLightNavt',      \r\n      glow: 'ThemeLightglow',\r\n      zone: 'ThemeLightZone',\r\n      panel1: 'ThemeLightPanel1',      \r\n      panel2: 'ThemeLightPanel2',\r\n      card: 'ThemeLightCard',\r\n      cardbox: 'ThemeLightCardBox',\r\n      selectSelf: 'ThemeLightSelects',\r\n      selectChd: 'ThemeLightSelectc',\r\n      activefill: 'ThemeLightActf',\r\n      activeSelf: 'ThemeLightActs',            \r\n    },\r\n    dark: {\r\n      foreground: 'ThemeDarkFG',\r\n      background: 'ThemeDarkBG',\r\n      btnFG: 'ThemeDarkBtnFG',\r\n      btnBG: 'ThemeDarkBtnBG',\r\n      container: 'ThemeDarkBox',      \r\n      fill: 'ThemeDarkFill',\r\n      stack: 'ThemeDarkStack',\r\n      nstack: 'ThemeDarkNstack',\r\n      navb: 'ThemeDarkNavb',\r\n      navicon: 'ThemeDarkNavIcon',\r\n      navt: 'ThemeDarkNavt',\r\n      glow: 'ThemeDarkglow',\r\n      zone: 'ThemeDarkZone',\r\n      panel1: 'ThemeDarkPanel1',      \r\n      panel2: 'ThemeDarkPanel2',      \r\n      card: 'ThemeDarkCard',\r\n      cardbox: 'ThemeDarkCardBox',\r\n      selectSelf: 'ThemeDarkSelects',\r\n      selectChd: 'ThemeDarkSelectc',\r\n      activefill: 'ThemeDarkActf',\r\n      activeSelf: 'ThemeDarkActs',\r\n    },\r\n  };\r\n\r\n  const ThemeContext = React.createContext(\r\n    themes.dark // default value\r\n  );\r\n\r\nexport default ThemeContext;","import React from 'react';\r\nimport ThemeContext from '../context/ThemeContext';\r\nimport { ReactSvgInjector, Mutate } from \"react-svg-injector\";\r\nimport logo from '../images/logo.svg';\r\nimport '../CSS/Home.css';\r\n\r\nfunction App() {\r\n  const themeCSS = React.useContext(ThemeContext);\r\n\r\n  return (\r\n    <div className={`App ${themeCSS.background}`}>\r\n      <header className=\"App-header\">\r\n        <ReactSvgInjector src={logo} className=\"App-logo\" alt=\"logo\">\r\n          <Mutate selector=\"path\" class={themeCSS.fill} />\r\n          <Mutate selector=\"circle\" class={themeCSS.fill} />\r\n        </ReactSvgInjector>          \r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ThemeContext from '../context/ThemeContext';\r\nimport '../CSS/Footer.css';\r\nimport '../CSS/Header.css';\r\nimport himg from \"../images/logo.svg\";\r\nimport bimg from \"../images/bank.svg\";\r\nimport cimg from \"../images/community.svg\";\r\nimport timg from \"../images/ttt.svg\";\r\nimport limg from \"../images/link.svg\";\r\nimport simg from \"../images/book.svg\";\r\nimport thimg from \"../images/theme.svg\";\r\n\r\n\r\nclass NavHeader extends React.Component {\r\n\r\n    static contextType = ThemeContext;\r\n\r\n    render() {\r\n        return (\r\n            <nav className={`zone sticky ${this.context.zone} ${this.context.navt} ${this.context.glow}`}>\r\n                <ul className=\"main-nav\">\r\n                    <li>\r\n                        <label id=\"modulelabel\">{this.props.applabel}</label>\r\n                    </li>   \r\n                    <li className=\"push\">\r\n                        <label id=\"credentiallabel\">{this.props.credential}</label>\r\n                        <label id=\"classlabel\">{this.props.currentController}</label>\r\n                    </li>      \r\n                </ul>    \r\n                \r\n                <div className=\"zone red warning\">\r\n                    <label id=\"warninglabel\">{this.props.warninglabel}</label>\r\n                </div>      \r\n            </nav>\r\n        );\r\n    }    \r\n}\r\n\r\nclass NavFooter extends React.Component {\r\n\r\n    static contextType = ThemeContext;\r\n        \r\n    render() {\r\n        return (\r\n            <footer className={`zone bottom-nav stickyb ${this.context.navb}`}>\r\n                <div>\r\n                    <input type=\"image\" src={himg} alt=\"Home\" className={`navbox ${this.context.navicon}`} disabled={this.props.on} onClick={this.props.onClick}></input>\r\n                    <input type=\"image\" src={bimg} alt=\"Banking\" className={`navbox ${this.context.navicon}`} disabled={this.props.on} onClick={this.props.onClick}></input>\r\n                    <input type=\"image\" src={cimg} alt=\"Demographic\" className={`navbox ${this.context.navicon}`} disabled={this.props.on} onClick={this.props.onClick}></input>\r\n                    <input type=\"image\" src={timg} alt=\"Tic Tac Toe\" className={`navbox ${this.context.navicon}`} disabled={this.props.on} onClick={this.props.onClick}></input>\r\n                    <input type=\"image\" src={limg} alt=\"Linked List\" className={`navbox ${this.context.navicon}`} disabled={this.props.on} onClick={this.props.onClick}></input>\r\n                    <input type=\"image\" src={simg} alt=\"Stack and Queue\" className={`navbox ${this.context.navicon}`} disabled={this.props.on} onClick={this.props.onClick}></input>\r\n                    <input type=\"image\" src={thimg} alt=\"Settings\" className={`navbox ${this.context.navicon}`} disabled={this.props.on} onClick={this.props.onClick}></input>\r\n                </div>\r\n            </footer>\r\n        );\r\n    }\r\n}\r\n\r\nexport default {NavHeader, NavFooter};","export default class Account {\r\n\r\n    constructor(accountName, startingBalance) {\r\n\r\n        this.accountName = accountName;\r\n        this.startingBalance = startingBalance;\r\n    }\r\n\r\n    deposit(amount) {        \r\n        \r\n        return this.startingBalance = this.startingBalance + Number(amount);\r\n    }\r\n\r\n    withdraw(amount) {        \r\n        return this.startingBalance = this.startingBalance - Number(amount);\r\n    }\r\n\r\n    balance() {        \r\n        return this.startingBalance;\r\n    }\r\n\r\n}\r\n\r\nexport class AccountController {\r\n\r\n    constructor(accountHolder, accounts) {\r\n\r\n        this.accountHolder = accountHolder;\r\n        this.accounts = [];\r\n    }\r\n\r\n    add_account(accountName, startingBalance) {        \r\n\r\n        this.accounts.push(new Account(accountName, startingBalance));\r\n\r\n        return this.accounts;\r\n    }\r\n\r\n    remove_account(accountName) {        \r\n        \r\n        for (let i=0; i<this.accounts.length; i++) {\r\n\r\n            if(this.accounts[i].accountName === accountName) {\r\n                this.accounts.splice(i,1);\r\n            }            \r\n        }\r\n\r\n        return this.accounts;\r\n    }\r\n\r\n    rename_account(accountName, accountRename){\r\n        for (let i=0; i<this.accounts.length; i++) {\r\n\r\n            if(this.accounts[i].accountName === accountName) {\r\n                this.accounts[i].accountName = accountRename;\r\n            }\r\n            \r\n        }     \r\n        \r\n        return this.accounts;\r\n    }\r\n\r\n    isNameExisting(accountName){\r\n        let isExisting = false;\r\n\r\n        for (let i=0; i<this.accounts.length; i++) {\r\n\r\n            if(this.accounts[i].accountName === accountName) {\r\n                isExisting = true;\r\n            }\r\n        }     \r\n        \r\n        return isExisting;\r\n    }\r\n    \r\n    return_index(accountName){\r\n        return this.accounts.findIndex((element) => element.accountName === accountName);\r\n    }    \r\n\r\n    copyArray(array) {\r\n\r\n        for (let i=0; i < array.length; i++) {\r\n            this.accounts.push(new Account(array[i].accountName, array[i].startingBalance));\r\n        }\r\n\r\n        return this.accounts;\r\n    }\r\n\r\n    sum_balance () {\r\n\r\n        return this.accounts.reduce(((total,currentAcct) => total+currentAcct.startingBalance),0);\r\n    }\r\n\r\n    max_balance () {\r\n\r\n        return this.accounts.reduce(((max,currentAcct) => Math.max(max,currentAcct.startingBalance)),this.accounts[0].startingBalance);\r\n\r\n    }\r\n\r\n    min_balance () {\r\n\r\n        return this.accounts.reduce(((min,currentAcct) => Math.min(min,currentAcct.startingBalance)),this.accounts[0].startingBalance);\r\n\r\n    }    \r\n\r\n}","import React from 'react';\r\nimport { AccountController } from '../scripts/account.js';\r\nimport ThemeContext from '../context/ThemeContext';\r\nimport '../CSS/CardApp.css';\r\n\r\nclass Bank extends React.Component {\r\n\r\n    static contextType = ThemeContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentAccount: \"None\",\r\n            user: new AccountController(\"John Doe\"),\r\n            list: [],\r\n            card: [],\r\n            inputAmt: 0,\r\n            key: 0,\r\n            otheme: this.context,\r\n        };\r\n    }     \r\n\r\n    componentDidUpdate() {\r\n\r\n        if (this.state.otheme !== this.context) {\r\n            const holder = this.state.user;   \r\n            const cards = [];\r\n    \r\n            for (let i=0; i<holder.accounts.length; i++) {\r\n                this.addCard(cards, holder.accounts[i].accountName, \"Balance: $\" + holder.accounts[i].startingBalance);\r\n            }\r\n            \r\n            this.setState({\r\n                card: cards,\r\n                otheme: this.context,\r\n             });\r\n        }   \r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className={`CardApp ${this.context.background}`}>            \r\n                <div className=\"container zone\">        \r\n                    <div className={`panel ${this.context.panel1}`}>\r\n                        <label className={`highlight ${this.context.glow}`}>Transaction Activities</label>      \r\n                        <ul className=\"accctdisplay\">\r\n                            {this.state.list}\r\n                        </ul>\r\n                    </div>\r\n                    <div className={`panel ${this.context.panel2}`}>\r\n                        <label id=\"active_class\" className={`highlight ${this.context.glow}`}>Active Account: {this.state.currentAccount}</label>\r\n                        <div className={`subpanel ${this.context.selectChd}`}>                             \r\n                            <button type=\"button\" className={`spbtn1 ${this.context.btnFG}`} onClick={(e) => this.createAccount()}>Create Account</button>\r\n                            <button type=\"button\" className={`spbtn2 ${this.context.btnFG}`} onClick={(e) => this.removeAccount()}>Remove Account</button>\r\n                            <button type=\"button\" className={`spbtn3 ${this.context.btnFG}`} onClick={(e) => this.renameAccount()}>Rename Account</button>        \r\n                            <button type=\"button\" className={`spbtn4 ${this.context.btnFG}`} onClick={(e) => this.sumBalance()}>Sum Balance</button>\r\n                            <button type=\"button\" className={`spbtn5 ${this.context.btnFG}`} onClick={(e) => this.maxBalance()}>Max Balance</button>\r\n                            <button type=\"button\" className={`spbtn6 ${this.context.btnFG}`} onClick={(e) => this.minBalance()}>Min Balance</button>\r\n                            <p className=\"spp1\">Amount:</p>\r\n                            <input type=\"number\" className={`inbtn1 ${this.context.btnFG}`} value={this.state.inputAmt} onChange={(e) => this.inputChg(e)}></input>       \r\n                            <button type=\"button\" className={`inbtn7 ${this.context.btnFG}`} onClick={(e) => this.deposit()}>Deposit</button>\r\n                            <button type=\"button\" className={`inbtn8 ${this.context.btnFG}`} onClick={(e) => this.withdraw()}>Withdraw</button>\r\n                            <button type=\"button\" className={`inbtn9 ${this.context.btnFG}`} onClick={(e) => this.balance()}>Balance</button>                                    \r\n                            <button type=\"button\" className={`spbtn10 ${this.context.btnFG}`} onClick={(e) => this.randAccount()}>Random</button>\r\n                        </div>\r\n                    </div>\r\n                </div>            \r\n\r\n                <div className={`zone grid-wrapper frame ${this.context.card}`}>\r\n                    {this.state.card}\r\n                </div>\r\n            </div>\r\n        );\r\n    }    \r\n\r\n    inputChg (e){\r\n        this.setState({\r\n            inputAmt: e.target.value\r\n          });        \r\n    }\r\n\r\n    cardClick(e) {\r\n        this.setState({\r\n            currentAccount: e.target.getAttribute(\"update\") \r\n          }); \r\n    }   \r\n\r\n    renderList(list, msg, key) {        \r\n        if(list.length === 5) {\r\n            list.shift();\r\n        }        \r\n        list.push(<li key={`k${key}`}>{msg}</li>);        \r\n\r\n        return list;        \r\n    }\r\n\r\n    addCard(array, name, msg) {\r\n        array.push(\r\n            <div update={name} key={`${name}_div`} className={`box ${this.context.cardbox} ${this.context.selectSelf}`} onClick={(e) => this.cardClick(e)}>\r\n                <ul update={name} key={`${name}_ul`}>\r\n                    <li update={name} key={`${name}_li1`}>{name}</li>\r\n                    <li update={name} key={`${name}_li2`}>{msg}</li>\r\n                </ul>\r\n            </div>            \r\n        )\r\n    }\r\n\r\n    randAccount() {\r\n        const acct = [\"Investment\", \"High Interest\", \"TFSA\", \"RRSP\", \"Bit Coin\", \"Blockchain\", \"Spending\"];\r\n        const holder = this.state.user;   \r\n        let cards = this.state.card.slice(); \r\n\r\n        let isAdd=false;\r\n        let maxTry=0;\r\n        let i=0;\r\n        let name = acct[0];\r\n        while((maxTry < 50) && !isAdd) {\r\n\r\n            name = acct[i] + maxTry;\r\n\r\n            if (!holder.isNameExisting(name)) {\r\n                holder.add_account(name,Math.round(Math.random()*100));\r\n                this.addCard(cards, name, \"Balance: $\" + Math.round(Math.random()*100));\r\n                    \r\n                isAdd=true;\r\n\r\n                // Maintain Page State\r\n                this.setState({\r\n                    currentAccount: name,\r\n                    user: holder,\r\n                    list: [],\r\n                    card: cards,\r\n                });                                \r\n            }\r\n\r\n            i=maxTry%(acct.length-1);\r\n            maxTry++;\r\n        }\r\n\r\n        if (!isAdd) {\r\n            window.alert(\"Failed to randomly generate account, please enter it manually.\");\r\n        }\r\n\r\n    }\r\n\r\n    createAccount() {\r\n        const name = window.prompt(\"Enter Account Name: \",\"Saving\");\r\n        const holder = this.state.user;   \r\n        let cards = this.state.card.slice();         \r\n            \r\n        if (name !== null && name !== \"\") {\r\n            if(!holder.isNameExisting(name)) {\r\n\r\n                holder.add_account(name,0);\r\n                this.addCard(cards, name, \"Balance: $\" + 0);\r\n\r\n                // Maintain Page State\r\n                this.setState({currentAccount: name,\r\n                               user: holder,\r\n                               list: [],\r\n                               card: cards,\r\n                            });                \r\n            }\r\n            else {\r\n                window.alert(\"Invalid account name, please try again.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    removeAccount() {    \r\n        const holder = this.state.user;\r\n        const currentAccount = this.state.currentAccount;   \r\n        let cards = this.state.card.slice(); \r\n\r\n        if (currentAccount === null || currentAccount === \"\") {\r\n\r\n            window.alert(\"Invalid Account to Remove.\");\r\n            return;     \r\n        }\r\n        else {\r\n            if(!holder.isNameExisting(currentAccount)) {\r\n\r\n                window.alert(\"Invalid Account to Remove.\");\r\n                return;\r\n            }\r\n            else {\r\n                holder.remove_account(currentAccount);\r\n                cards = cards.filter(card => card.key.replace(\"_div\",\"\") !== currentAccount);\r\n\r\n                // Maintain Page State\r\n                this.setState({currentAccount: \"None\",\r\n                    user: holder,\r\n                    list: [],\r\n                    card: cards,\r\n                }); \r\n\r\n                return; \r\n            }\r\n        }        \r\n    }\r\n\r\n    renameAccount() {  \r\n        const holder = this.state.user;\r\n        const currentAccount = this.state.currentAccount;   \r\n        let cards = [];\r\n\r\n        if (currentAccount === null || currentAccount === \"\") {\r\n\r\n            window.alert(\"Invalid Account to Rename.\");\r\n            return;     \r\n        }\r\n        else {\r\n            if(!holder.isNameExisting(currentAccount)) {\r\n\r\n                window.alert(\"Invalid Account to Rename.\");\r\n                return;\r\n            }\r\n            else {\r\n                let name = window.prompt(\"Enter New Name for the Account: \");\r\n\r\n                if(!holder.isNameExisting(name) && (name !== null) && (name !== \"\")) {\r\n                    holder.rename_account(currentAccount, name);\r\n\r\n                    for (let i=0; i<holder.accounts.length; i++) {                        \r\n                        this.addCard(cards, holder.accounts[i].accountName, \"Balance: $\" + holder.accounts[i].startingBalance);\r\n                    }\r\n\r\n                    // Maintain Page State\r\n                    this.setState({currentAccount: name,\r\n                        user: holder,\r\n                        list: [],\r\n                        card: cards,\r\n                    });    \r\n                      \r\n                    return;\r\n                }\r\n                else {\r\n                    window.alert(\"Invalid Account to Rename.\");\r\n                    return;\r\n                }                                                          \r\n            }\r\n        }     \r\n    }\r\n\r\n    sumBalance() {\r\n        const holder = this.state.user;\r\n        const list = this.state.list;\r\n        let key = this.state.key+1;\r\n\r\n        if (holder.accounts.length > 0) {\r\n            this.renderList(list, \"Total Balance: $\" + holder.sum_balance(), key);\r\n        }\r\n\r\n        // Maintain Page State\r\n        this.setState({list: list, key: key});         \r\n    }\r\n\r\n    maxBalance() {\r\n        const holder = this.state.user;\r\n        const list = this.state.list;\r\n        let key = this.state.key+1;\r\n\r\n        if (holder.accounts.length > 0) {\r\n            this.renderList(list, \"Max Balance: $\" + holder.max_balance(), key);\r\n        }\r\n\r\n        // Maintain Page State\r\n        this.setState({list: list, key: key}); \r\n    } \r\n    \r\n    minBalance() {\r\n        const holder = this.state.user;\r\n        const list = this.state.list;\r\n        let key = this.state.key+1;\r\n\r\n        if (holder.accounts.length > 0) {\r\n            this.renderList(list, \"Min Balance: $\" + holder.min_balance(), key);\r\n        }\r\n\r\n        // Maintain Page State\r\n        this.setState({list: list, key: key}); \r\n    }\r\n    \r\n    deposit() {\r\n        const holder = this.state.user;\r\n        const currentAccount = this.state.currentAccount;\r\n        const list = this.state.list;   \r\n        let cards = [];  \r\n        let key = this.state.key+1;      \r\n\r\n        if(currentAccount !== \"None\"){\r\n                \r\n            let index = holder.return_index(currentAccount);\r\n            holder.accounts[index].deposit(this.state.inputAmt);\r\n            if (holder.accounts.length > 0) {\r\n                this.renderList(list, \"Deposit: $\" + this.state.inputAmt, key);\r\n            }\r\n\r\n            for (let i=0; i<holder.accounts.length; i++) {                        \r\n                this.addCard(cards, holder.accounts[i].accountName, \"Balance: $\" + holder.accounts[i].startingBalance);\r\n            }\r\n\r\n            // Maintain Page State\r\n            this.setState({\r\n                list: list,\r\n                card: cards,\r\n                inputAmt: 0,\r\n                key: key,\r\n            }); \r\n        }      \r\n    }\r\n\r\n    withdraw() {\r\n        const holder = this.state.user;\r\n        const currentAccount = this.state.currentAccount;\r\n        const list = this.state.list;   \r\n        let cards = [];      \r\n        let key = this.state.key+1;  \r\n\r\n        if(currentAccount !== \"None\"){\r\n                \r\n            let index = holder.return_index(currentAccount);\r\n            holder.accounts[index].withdraw(this.state.inputAmt);\r\n            if (holder.accounts.length > 0) {\r\n                this.renderList(list, \"Withdraw: $\" + this.state.inputAmt, key);\r\n            }\r\n\r\n            for (let i=0; i<holder.accounts.length; i++) {                        \r\n                this.addCard(cards, holder.accounts[i].accountName, \"Balance: $\" + holder.accounts[i].startingBalance);\r\n            }\r\n\r\n            // Maintain Page State\r\n            this.setState({\r\n                list: list,\r\n                card: cards,\r\n                inputAmt: 0,\r\n                key: key,\r\n            }); \r\n        }                 \r\n    }\r\n    \r\n    balance() {\r\n        const holder = this.state.user;\r\n        const currentAccount = this.state.currentAccount;\r\n        const list = this.state.list;\r\n        let key = this.state.key+1;\r\n\r\n        if(currentAccount !== \"None\"){\r\n                \r\n            let index = holder.return_index(currentAccount);\r\n            this.renderList(list, \"Balance: $\" + holder.accounts[index].balance(), key);\r\n\r\n            // Maintain Page State\r\n            this.setState({\r\n                list: list,\r\n                key: key,\r\n            });       \r\n        }       \r\n    }\r\n}\r\n\r\nexport default Bank;","export default class City {\r\n    \r\n    constructor(name, latitude, longitude, population) {\r\n\r\n        this.name = name;\r\n        this.latitude = latitude;\r\n        this.longitude = longitude;\r\n        this.population = population;\r\n    }\r\n\r\n    show() {                \r\n\r\n        return `${this.name}, ${this.latitude}, ${this.longitude}, ${this.population}`;\r\n    }    \r\n\r\n    movedIn(headcount) {                \r\n\r\n        return this.population = Number(this.population) + Number(headcount);\r\n    }   \r\n\r\n    movedOut(headcount) {                \r\n\r\n        return this.population = Number(this.population) - Number(headcount);\r\n    }  \r\n\r\n    howBig() {              \r\n              \r\n        switch(true) {\r\n            case this.population > 100000:\r\n                return \"City\";\r\n\r\n            case (20000 < this.population) && (this.population <= 100000):\r\n                return \"Large town\";\r\n\r\n            case (1000 < this.population) && (this.population <= 20000):\r\n                return \"Town\";\r\n\r\n            case (100 < this.population) && (this.population <= 1000):\r\n                return \"Village\";\r\n\r\n            case this.population <= 100:\r\n                return \"Hamlet\";\r\n\r\n            default:\r\n        }\r\n\r\n        return;\r\n    }      \r\n}\r\n\r\nexport class Community {\r\n\r\n    constructor(name, citys) {\r\n\r\n        this.name = name;\r\n        this.citys = [];\r\n    }\r\n\r\n    createCity (name, latitude, longitude, population) {\r\n\r\n        this.citys.push(new City(name, latitude, longitude, population));\r\n\r\n        return this.citys;\r\n    }\r\n\r\n\r\n    deleteCity(name) {        \r\n            \r\n        this.citys = this.citys.filter(city => city.name !== name);\r\n\r\n        return this.citys;\r\n    }        \r\n\r\n\r\n    whichSphere (name) {\r\n\r\n        const location = this.citys.find(city => city.name === name);\r\n\r\n        switch(true) {\r\n            case Number(location.latitude) === 0:\r\n                return \"Equator\";\r\n\r\n            case Number(location.latitude) > 0:\r\n                return \"Northern Hemisphere\";\r\n\r\n            case Number(location.latitude) <0:\r\n                return \"Southern Hemisphere\";\r\n\r\n            default:\r\n        }\r\n        \r\n    }\r\n\r\n    getMostNorthern () {\r\n        \r\n        let city = this.citys[0];\r\n\r\n        for (let i=1; i<this.citys.length; i++) {\r\n\r\n            if (Number(city.latitude) < Number(this.citys[i].latitude)) {\r\n                city = this.citys[i];\r\n            }                \r\n\r\n        }\r\n\r\n        return city.name;\r\n    }\r\n\r\n\r\n    getMostSouthern () {\r\n\r\n        let city = this.citys[0];        \r\n\r\n        for (let i=1; i<this.citys.length; i++) {\r\n\r\n            if (Number(city.latitude) > Number(this.citys[i].latitude)) {\r\n                city = this.citys[i];            \r\n            }               \r\n            \r\n        }\r\n\r\n        return city.name;\r\n    }\r\n\r\n\r\n    getPopulation () {\r\n        return this.citys.reduce(((total,currentCity) => total+Number(currentCity.population)),0);\r\n    }\r\n\r\n    return_index(cityName){        \r\n        return this.citys.findIndex((element) => element.name === cityName);\r\n    }  \r\n\r\n    isNameExisting(settlementName){\r\n        let isExisting = false;\r\n\r\n        for (let i=0; i<this.citys.length; i++) {\r\n\r\n            if(this.citys[i].name === settlementName) {\r\n                isExisting = true;\r\n            }\r\n            \r\n        }     \r\n        \r\n        return isExisting;\r\n    }\r\n    \r\n    copyArray(array) {\r\n        \r\n        for (let i=0; i < array.length; i++) {\r\n            this.citys.push(new City(array[i].name, array[i].latitude, array[i].longitude, array[i].population));\r\n        }\r\n\r\n        return this.citys;\r\n    }\r\n\r\n}","const functions = {\r\n\r\n    async getData(url) {\r\n        try {\r\n            const response = await fetch(url);\r\n            const data = await response.json();                                 \r\n            return data;\r\n        } catch (error) {\r\n            console.error('Error:', error);\r\n            throw (error);\r\n        }\r\n    },\r\n        \r\n    async postData(url, data) {\r\n        // Default options are marked with *\r\n        const response = await fetch(url, {\r\n            method: 'POST',     // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors',       // no-cors, *cors, same-origin\r\n            cache: 'no-cache',  // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: 'follow',         // manual, *follow, error\r\n            referrer: 'no-referrer',    // no-referrer, *client\r\n            body: JSON.stringify(data)  // body data type must match \"Content-Type\" header\r\n        });\r\n    \r\n        const json = await response.json();    // parses JSON response into native JavaScript objects\r\n        json.status = response.status;\r\n        json.statusText = response.statusText;\r\n        // console.log(json, typeof(json));\r\n        return json;\r\n    },\r\n\r\n    async putData(url, data) {\r\n        // Default options are marked with *\r\n        const response = await fetch(url, {\r\n            method: 'PUT',     // *GET, POST, PUT, DELETE, etc.\r\n            mode: 'cors',       // no-cors, *cors, same-origin\r\n            cache: 'no-cache',  // *default, no-cache, reload, force-cache, only-if-cached\r\n            credentials: 'same-origin', // include, *same-origin, omit\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n                // 'Content-Type': 'application/x-www-form-urlencoded',\r\n            },\r\n            redirect: 'follow',         // manual, *follow, error\r\n            referrer: 'no-referrer',    // no-referrer, *client\r\n            body: JSON.stringify(data)  // body data type must match \"Content-Type\" header\r\n        });\r\n    \r\n        const json = await response.json();    // parses JSON response into native JavaScript objects\r\n        json.status = response.status;\r\n        json.statusText = response.statusText;\r\n        // console.log(json, typeof(json));\r\n        return json;\r\n    },    \r\n}\r\n\r\nexport default functions;","import React from 'react';\r\nimport { Community } from '../scripts/city.js';\r\nimport ThemeContext from '../context/ThemeContext';\r\nimport NET from '../scripts/netcomm.js';\r\nimport '../CSS/CardApp.css';\r\n\r\nclass Demographics extends React.Component {\r\n    \r\n    static contextType = ThemeContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currentCity: \"None\",\r\n            community: new Community(\"New Settlement\"),\r\n            list: [],\r\n            card: [],\r\n            inputAmt: 0,\r\n            key: 0,\r\n            otheme: this.context,\r\n            cacheCitys: [],\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.otheme !== this.context) {\r\n            const place = this.state.community;   \r\n            const cards = [];\r\n    \r\n            for (let i=0; i<place.citys.length; i++) {\r\n                this.addCard(cards, place.citys[i].name, \"Population: \" + place.citys[i].population);\r\n            }\r\n            \r\n            this.setState({\r\n                card: cards,\r\n                otheme: this.context,\r\n             });\r\n        }   \r\n    }    \r\n\r\n    render() { \r\n\r\n        return (\r\n            <div className={`CardApp ${this.context.background}`}>            \r\n                <div className=\"container zone\">        \r\n                    <div className={`panel ${this.context.panel1}`}>\r\n                        <label className={`highlight ${this.context.glow}`}>Population Movement</label>      \r\n                        <ul className=\"accctdisplay\">\r\n                            {this.state.list}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <div className={`panel ${this.context.panel2}`}>\r\n                        <label id=\"active_class\" className={`highlight ${this.context.glow}`}>Current Location: {this.state.currentCity}</label>\r\n                        <div className={`subpanel ${this.context.selectChd}`}>                             \r\n                            <button type=\"button\" className={`spbtn1 ${this.context.btnFG}`} onClick={(e) => this.createSettlement()}>Create Settlement</button>\r\n                            <button type=\"button\" className={`spbtn2 ${this.context.btnFG}`} onClick={(e) => this.deleteSettlement()}>Delete Settlement</button>\r\n                            <button type=\"button\" className={`spbtn3 ${this.context.btnFG}`} onClick={(e) => this.showSphere()}>Show Sphere</button>        \r\n                            <button type=\"button\" className={`spbtn4 ${this.context.btnFG}`} onClick={(e) => this.sumPopulation()}>Sum Population</button>\r\n                            <button type=\"button\" className={`spbtn5 ${this.context.btnFG}`} onClick={(e) => this.showMostNorthern()}>Show Most Northern</button>\r\n                            <button type=\"button\" className={`spbtn6 ${this.context.btnFG}`} onClick={(e) => this.showMostSouthern()}>Show Most Southern</button>\r\n                            <p className=\"spp1\">Population:</p>\r\n                            <input type=\"number\" className={`inbtn1 ${this.context.btnFG}` } value={this.state.inputAmt} onChange={(e) => this.inputChg(e)}></input>       \r\n                            <button type=\"button\" className={`spbtn7 ${this.context.btnFG}`} onClick={(e) => this.movedIn()}>Moved In</button>\r\n                            <button type=\"button\" className={`spbtn8 ${this.context.btnFG}`} onClick={(e) => this.movedOut()}>Moved Out</button>\r\n                            <button type=\"button\" className={`spbtn9 ${this.context.btnFG}`} onClick={(e) => this.howBig()}>How Big</button>                                    \r\n                            <button type=\"button\" className={`spbtn10 ${this.context.btnFG}`} onClick={(e) => this.randSettlement()}>Random</button>\r\n                        </div>\r\n                    </div>                \r\n                </div>            \r\n\r\n                <div className={`zone grid-wrapper frame ${this.context.card}`}>\r\n                    {this.state.card}\r\n                </div>\r\n            </div>\r\n        );\r\n    }    \r\n\r\n    renderList(list, msg, key) {        \r\n        if(list.length === 5) {\r\n            list.shift();\r\n        }        \r\n        list.push(<li key={`k${key}`}>{msg}</li>);\r\n\r\n        return list;        \r\n    }\r\n\r\n    addCard(array, name, msg) {\r\n        array.push(\r\n            <div update={name} key={`${name}_div`} className={`box ${this.context.cardbox} ${this.context.selectSelf}`} onClick={(e) => this.cardClick(e)}>\r\n                <ul update={name} key={`${name}_ul`}>\r\n                    <li update={name} key={`${name}_li1`}>{name}</li>\r\n                    <li update={name} key={`${name}_li2`}>{msg}</li>\r\n                </ul>\r\n            </div>            \r\n        )\r\n    }\r\n    \r\n    inputChg (e){\r\n        this.setState({\r\n            inputAmt: e.target.value\r\n          });        \r\n    }\r\n\r\n    cardClick(e) {\r\n        this.setState({\r\n            currentCity: e.target.getAttribute(\"update\") \r\n          }); \r\n    }   \r\n\r\n    async randSettlement () {\r\n        \r\n        const url = \"https://restcountries.eu/rest/v2/region/Americas?fields=name;population;latlng\";\r\n        let webdata = null;\r\n        let locCache = this.state.cacheCitys;\r\n        const place = this.state.community;   \r\n        let cards = this.state.card.slice();                      \r\n\r\n        if (locCache.length < 1) {  // No cache data, retrieve it before proceeding\r\n            try {\r\n                webdata = await NET.getData(url);\r\n    \r\n                if (webdata.status >= 400) {\r\n                    throw (new Error(`${webdata.status} ${webdata.message}`));\r\n                }\r\n                else {\r\n                    locCache = webdata;\r\n\r\n                    this.setState({\r\n                        cacheCitys: webdata,\r\n                     });\r\n                }\r\n            }\r\n            catch (error) {\r\n                console.error (\"Failed in retrievig data: \", error);\r\n                window.alert(\"Failed to randomly generate settlement, please enter it manually.\");\r\n            }            \r\n        }    \r\n\r\n        let isAdd=false;\r\n        let i=0;\r\n        while((i < locCache.length) && (!isAdd)) {\r\n            if(!place.isNameExisting(locCache[i].name)) {\r\n                place.createCity(locCache[i].name, locCache[i].latlng[0], locCache[i].latlng[1], locCache[i].population);\r\n                this.addCard(cards, locCache[i].name, \"Population: \" + locCache[i].population);\r\n\r\n                isAdd = true;\r\n\r\n                // Maintain Page State\r\n                this.setState({\r\n                    currentCity: locCache[i].name,\r\n                    community: place,\r\n                    list: [],\r\n                    card: cards,\r\n                 });                                \r\n            }\r\n        \r\n            i++;\r\n        }\r\n\r\n        if (!isAdd) {\r\n            window.alert(\"Invalid settlement name, please enter it manually.\");\r\n        }        \r\n    }\r\n\r\n    createSettlement() {\r\n        const name = window.prompt(\"Enter Settlement Name: \",\"Calgary\");\r\n        const place = this.state.community;   \r\n        let cards = this.state.card.slice();                      \r\n            \r\n        if (name !== null && name !== \"\") {\r\n\r\n            if(!place.isNameExisting(name)) {\r\n                const latitude = window.prompt(\"Enter latitude: \", 0);\r\n                const longitude = window.prompt(\"Enter longitude: \", 0);\r\n                const population = window.prompt(\"Enter population: \", 0);\r\n\r\n                place.createCity(name, latitude, longitude, population);\r\n                this.addCard(cards, name, \"Population: \" + population);\r\n\r\n                // Maintain Page State\r\n                this.setState({currentCity: name,\r\n                    community: place,\r\n                    list: [],\r\n                    card: cards,\r\n                 });                                \r\n            }\r\n            else {\r\n                window.alert(\"Invalid settlement name, please try again.\");\r\n            }\r\n        }\r\n    }    \r\n\r\n    deleteSettlement() {\r\n        const currentCity = this.state.currentCity; \r\n        const place = this.state.community;   \r\n        let cards = this.state.card.slice(); \r\n\r\n        if (currentCity === null || currentCity === \"\") {\r\n\r\n            window.alert(\"Invalid Settlement to Remove.\");\r\n            return;     \r\n        }\r\n        else {\r\n            if(!place.isNameExisting(currentCity)) {\r\n\r\n                window.alert(\"Invalid Settlement to Remove.\");\r\n                return;\r\n            }\r\n            else {\r\n                place.deleteCity(currentCity);\r\n                cards = cards.filter(card => card.key.replace(\"_div\",\"\") !== currentCity);\r\n\r\n                // Maintain Page State\r\n                this.setState({currentCity: \"None\",\r\n                    community: place,\r\n                    list: [],\r\n                    card: cards,\r\n                 });                 \r\n\r\n                return; \r\n            }\r\n        }  \r\n    }\r\n\r\n    showSphere() {\r\n        const currentCity = this.state.currentCity;        \r\n        const place = this.state.community;       \r\n        const list = this.state.list;   \r\n        let key = this.state.key+1;\r\n\r\n        if(currentCity !== \"None\"){\r\n            this.renderList(list, \"In: \" + place.whichSphere(currentCity), key);\r\n        }\r\n\r\n        // Maintain Page State\r\n        this.setState({list: list, key: key});        \r\n    }\r\n\r\n    sumPopulation() {\r\n        const place = this.state.community;       \r\n        const list = this.state.list;\r\n        let key = this.state.key+1;\r\n\r\n        if (place.citys.length > 0) {\r\n            this.renderList(list, \"Total Population: \" + place.getPopulation(), key);\r\n        }\r\n\r\n        // Maintain Page State\r\n        this.setState({list: list, key: key});        \r\n    }    \r\n\r\n    showMostNorthern() {\r\n        const place = this.state.community;       \r\n        const list = this.state.list;\r\n        let key = this.state.key+1;\r\n\r\n        if (place.citys.length > 0) {\r\n            this.renderList(list, \"Most Northern Settlement: \" + place.getMostNorthern(), key);\r\n        }\r\n\r\n        // Maintain Page State\r\n        this.setState({list: list, key: key});        \r\n    } \r\n\r\n    showMostSouthern() {\r\n        const place = this.state.community;       \r\n        const list = this.state.list;\r\n        let key = this.state.key+1;\r\n\r\n        if (place.citys.length > 0) {\r\n            this.renderList(list, \"Most Southern Settlement: \" + place.getMostSouthern(), key);\r\n        }\r\n\r\n        // Maintain Page State\r\n        this.setState({list: list, key: key});        \r\n    }     \r\n    \r\n    movedIn() {\r\n        const currentCity = this.state.currentCity;        \r\n        const place = this.state.community;       \r\n        const list = this.state.list;\r\n        let cards = [];  \r\n        let key = this.state.key+1; \r\n\r\n        if(currentCity !== \"None\"){\r\n                \r\n            let index = place.return_index(currentCity);\r\n            place.citys[index].movedIn(this.state.inputAmt);\r\n\r\n            if (place.citys.length > 0) {                                \r\n                this.renderList(list, \"Moved In: \" + this.state.inputAmt, key);\r\n            }\r\n\r\n            for (let i=0; i<place.citys.length; i++) {                        \r\n                this.addCard(cards, place.citys[i].name, \"Population: \" + place.citys[index].population);\r\n            }\r\n\r\n            // Maintain Page State\r\n            this.setState({\r\n                list: list,\r\n                card: cards,\r\n                inputAmt: 0,\r\n                key: key,\r\n             });       \r\n        }        \r\n    }\r\n\r\n    movedOut() {\r\n        const currentCity = this.state.currentCity;        \r\n        const place = this.state.community;       \r\n        const list = this.state.list;\r\n        let cards = [];\r\n        let key = this.state.key+1;   \r\n\r\n        if(currentCity !== \"None\"){\r\n                \r\n            let index = place.return_index(currentCity);\r\n            place.citys[index].movedOut(this.state.inputAmt);\r\n\r\n            if (place.citys.length > 0) {                                \r\n                this.renderList(list, \"Moved Out: \" + this.state.inputAmt, key);\r\n            }\r\n\r\n            for (let i=0; i<place.citys.length; i++) {                        \r\n                this.addCard(cards, place.citys[i].name, \"Population: \" + place.citys[index].population);\r\n            }\r\n\r\n            // Maintain Page State\r\n            this.setState({\r\n                list: list,\r\n                card: cards,\r\n                inputAmt: 0,\r\n                key: key,\r\n             });       \r\n        }        \r\n    }\r\n    \r\n    howBig() {\r\n        const place = this.state.community; \r\n        const currentCity = this.state.currentCity;        \r\n        const list = this.state.list;\r\n        let key = this.state.key+1;   \r\n\r\n        if(currentCity !== \"None\"){\r\n                \r\n            let index = place.return_index(currentCity);\r\n            this.renderList(list, \"Classification: \" + place.citys[index].howBig(), key);\r\n\r\n            // Maintain Page State\r\n            this.setState({\r\n                list: list,\r\n                key: key,\r\n            });       \r\n        }       \r\n    }\r\n}\r\n\r\nexport default Demographics;","import React from 'react';\r\nimport ThemeContext from '../context/ThemeContext';\r\n\r\n// https://reactjs.org/tutorial/tutorial.html\r\nfunction Square(props) {\r\n  const themeCSS = React.useContext(ThemeContext);\r\n\r\n  return (\r\n    <button className={`square ${themeCSS.btnBG}`} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport Square from '../components/Square';\r\n\r\nclass Board extends React.Component {\r\n\r\n    renderSquare(i) {\r\n      return (\r\n        <Square\r\n          value={this.props.squares[i]}\r\n          onClick={() => this.props.onClick(i)}\r\n        />\r\n      );\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  export default Board;","import React from 'react';\r\nimport ThemeContext from '../context/ThemeContext';\r\nimport Board from '../components/Board';\r\nimport '../CSS/Game.css';\r\nimport '../CSS/Theme.css';\r\n\r\nclass Game extends React.Component {\r\n\r\n    static contextType = ThemeContext;\r\n\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true,\r\n        AIon: false,\r\n        mode: \"Normal\",\r\n      };\r\n    }  \r\n\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);      \r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      let nextPlayer = this.state.xIsNext;\r\n      let newhistory;\r\n      let newstepNum;\r\n\r\n      if (calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n\r\n      if (this.state.AIon) {  // AI On    \r\n        let AImove = applyAI(squares, true, this.state.mode);\r\n        if (AImove.length < 1) { // No more move available for AI\r\n          newhistory = history.concat([{squares: squares}]);          \r\n          newstepNum = history.length;\r\n        }\r\n        else {                   // 1 or more move available for AI\r\n          newhistory = history.concat([{squares: squares}], [{squares: AImove}]);\r\n          newstepNum = history.length + 1;\r\n        }          \r\n      }\r\n      else {                  // AI Off\r\n        newhistory = history.concat([{squares: squares}]);          \r\n        newstepNum = history.length;\r\n        nextPlayer = !this.state.xIsNext;\r\n      }\r\n\r\n      this.setState({        \r\n        history: newhistory,        \r\n        stepNumber: newstepNum,       \r\n        xIsNext: nextPlayer,}\r\n      );       \r\n    }\r\n\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      });\r\n    }\r\n\r\n    turnAIswitch() {\r\n      this.setState({\r\n        AIon: !this.state.AIon\r\n      });      \r\n    }\r\n\r\n    clearGame() {\r\n      this.setState({\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true,\r\n      });\r\n    }\r\n\r\n    switchMode() {\r\n      let temp;\r\n      switch (this.state.mode) {\r\n        case \"Easy\":\r\n          temp = \"Normal\";\r\n          break;\r\n        case \"Normal\":\r\n          temp = \"Hard\";\r\n          break;\r\n        default:\r\n          temp = \"Easy\";\r\n          break;\r\n      }\r\n\r\n      this.setState({\r\n        mode: temp\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const history = this.state.history;\r\n      const current = history[this.state.stepNumber];    \r\n      const winner = calculateWinner(current.squares);\r\n      const on = false;\r\n      const off = true;\r\n  \r\n      const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n          'Go to move #' + move :\r\n          'Go to game start';\r\n\r\n        return (\r\n          <li key={move}>\r\n            <button className={`game-ctl ${this.context.btnBG}`} onClick={() => this.jumpTo(move)} disabled={this.state.AIon ? (move%2 === 0 ? on : off) : on}>{desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      let status;\r\n      if (winner) {\r\n        status = 'Winner: ' + winner;\r\n      } else {\r\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }        \r\n\r\n      const difficulty = <button className={`game-ctl ${this.context.btnBG}`} onClick={() => this.switchMode()}>{this.state.mode}</button>;\r\n      const switchAI = <button className={`game-ctl ${this.context.btnBG}`} onClick={() => this.turnAIswitch()}>{this.state.AIon ? 'Single Player': 'Two Players'}</button>;\r\n      const clear = <button className={`game-ctl ${this.context.btnBG}`} onClick={() => this.clearGame()}>Clear Game</button>;\r\n\r\n      return (\r\n        <div className={`game ${this.context.background}`}>\r\n          <div className=\"game-content\">    \r\n            <div className=\"game-option\">\r\n              <div>{switchAI} {difficulty}</div>\r\n              <div>{clear}</div>            \r\n            </div>          \r\n            <div className=\"game-board\">                 \r\n              <Board\r\n                squares={current.squares}\r\n                onClick={(i) => this.handleClick(i)}\r\n              />\r\n            </div>          \r\n            <div className={`game-info ${this.context.background}`}>            \r\n                <div>{status}</div>\r\n                <ol>{moves}</ol>            \r\n            </div>          \r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  // Return the next move as an array to contains the entire board current state\r\n  function applyAI (squares, isPlayerX, mode) {\r\n    let AImove = [];\r\n    let AImoveIndex = -1;\r\n\r\n    // get move from AI as i \r\n    switch(mode) {\r\n      case \"Easy\":  \r\n        AImoveIndex = produceRandomMove(squares);\r\n        break;\r\n      case \"Normal\":\r\n        AImoveIndex = (Math.random() < 0.2) ? produceRandomMove(squares) : produceBestMove(squares, isPlayerX);\r\n        break;\r\n      case \"Hard\":        \r\n        AImoveIndex = produceBestMove(squares, isPlayerX);\r\n        break;\r\n      default:                  \r\n    }    \r\n\r\n    if (AImoveIndex > -1) {\r\n      AImove = squares.slice();\r\n\r\n      AImove[AImoveIndex] = 'O';\r\n    }              \r\n\r\n    return AImove;\r\n  }\r\n\r\n  // Generate best move based on remaining available move on the board\r\n  function produceBestMove(squares, isPlayerX) {    \r\n    let bestscore = -Infinity;\r\n    let move = -1;\r\n\r\n    squares.forEach((square, i) => {\r\n      if (square === null) {        \r\n        // Make a copy of the board states and reset for each first move\r\n        const sim_squares = squares.slice();    \r\n        // AI makes a move in the next available square        \r\n        sim_squares[i] = (isPlayerX) ? \"O\" : \"X\"; \r\n        let score = Math.max(bestscore, minmax(sim_squares, false, isPlayerX));\r\n        \r\n        if(score > bestscore) {\r\n          bestscore = score;\r\n          move = i;\r\n        }        \r\n      }\r\n    });\r\n\r\n    return move;\r\n  }\r\n\r\n  // Generate the best score of the current board states for the maximizer (AI)\r\n  function minmax(squares, isNextMax, isPlayerX) {\r\n    \r\n    // TERMINATION CONDITION\r\n    if (squares.length < 0) {\r\n      return\r\n    }\r\n\r\n    // Check the result of the game\r\n    const score = returnResult(squares, isPlayerX);\r\n\r\n    // BASE CASE\r\n    // Either player wins, return the score (player = -1, AI = +1, draw = 0)\r\n    if (score !== null) {      \r\n        return score;\r\n    }\r\n\r\n    // RECURSION\r\n    // Simulate the game by looping through (recursivly calling) all possible moves by both players\r\n    // AI is the maximizer and Player is the minimizer\r\n    if (isNextMax) {       // Maximizer's (AI) move\r\n        let best = -Infinity;        \r\n\r\n        squares.forEach((square, i) => {\r\n            if (square === null) {\r\n                // Make a copy of the board states and reset for each first move\r\n                const sim_squares = squares.slice();\r\n\r\n                // Make a move in the next available square\r\n                sim_squares[i] = (isPlayerX) ? \"O\" : \"X\";          \r\n    \r\n                // call yourself to loop the next depth      \r\n                best = Math.max(best, minmax(sim_squares, !isNextMax, isPlayerX));            \r\n            }\r\n        });\r\n\r\n        return best;\r\n    }\r\n    else {\r\n        let best = Infinity;\r\n\r\n        squares.forEach((square, i) => {\r\n            if (square === null) {\r\n                // Make a copy of the board states and reset for each first move\r\n                const sim_squares = squares.slice();\r\n\r\n                // Make a move in the next available square\r\n                sim_squares[i] = (isPlayerX) ? \"X\" : \"O\";          \r\n    \r\n                // call yourself to loop the next depth      \r\n                best = Math.min(best, minmax(sim_squares, !isNextMax, isPlayerX));            \r\n            }\r\n        });        \r\n\r\n        return best;        \r\n    }\r\n  }\r\n\r\n  // Map symbol represented each player to assinged score\r\n  function returnResult(squares, isPlayerX) {\r\n\r\n    // AI: win = +1, draw = 0, loss = -1\r\n    const scores = isPlayerX ? { X: -1, O: +1, Draw: 0} : { X: 1, O: -1, Draw: 0}\r\n    const score = calculateWinner(squares);\r\n    return score === null ? null : scores[score];\r\n  }\r\n\r\n  // Generate random move based on remaining available move on the board\r\n  function produceRandomMove (squares) {      \r\n\r\n    const sim_squares = squares.slice();\r\n    let move = sim_squares.findIndex((square) => square === null );    \r\n    sim_squares.forEach((square, i) => {\r\n      if (square === null) {\r\n        move = (Math.random() < 0.2) ? i : move;\r\n      }      \r\n    }); \r\n    \r\n    return move;\r\n  }\r\n\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n\r\n    return !squares.includes(null) ? \"Draw\" : null;\r\n  }\r\n    \r\n  export default Game;\r\n  export {applyAI, produceRandomMove, calculateWinner, minmax, returnResult, produceBestMove};","import React from 'react';\r\nimport { ReactSvgInjector, Mutate } from \"react-svg-injector\";\r\nimport trainh from \"../images/train head.svg\";\r\nimport trainc1 from \"../images/train cart1.svg\";\r\nimport traint from \"../images/train cart3.svg\";\r\n\r\nfunction NodeHead(props) {\r\n  return (\r\n    <div className={props.nodecss}>\r\n      <p>{props.subject}</p> <p>Qty: {props.amount}</p>\r\n      <ReactSvgInjector src={trainh} className=\"train\">\r\n                    <Mutate selector=\"path\" class={props.trcss} />\r\n      </ReactSvgInjector>            \r\n    </div>\r\n  );\r\n}\r\n\r\nfunction Node(props) {\r\n  return (\r\n    <div className={props.nodecss}>\r\n      <p>{props.subject}</p> <p>Qty: {props.amount}</p>\r\n      <ReactSvgInjector src={trainc1} className=\"train\">\r\n                    <Mutate selector=\"path\" class={props.trcss} />\r\n      </ReactSvgInjector>      \r\n    </div>\r\n  );\r\n}\r\n\r\nfunction NodeTail(props) {\r\n  return (\r\n    <div className={props.nodecss}>\r\n      <p>{props.subject}</p> <p>Qty: {props.amount}</p>\r\n      <ReactSvgInjector src={traint} className=\"train\" >\r\n                    <Mutate selector=\"path\" class={props.trcss} />\r\n      </ReactSvgInjector>       \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { NodeHead, Node, NodeTail };","class ListNode {\r\n    constructor(subject, amount) {\r\n        this.forwardNode = null;\r\n        this.backwardNode = null;\r\n        this.subject = subject;\r\n        this.amount = amount;\r\n    }    \r\n}\r\n\r\n// Double linked list - Non Circular\r\nclass LinkedList {\r\n\r\n    constructor() {\r\n        this.head = null;\r\n        this.current = null;\r\n        this.tail = null;\r\n        this.size = 0;\r\n    }\r\n\r\n    // Show the subject and the amount\r\n    show() {\r\n        return {subject: this.current.subject, amount: this.current.amount};\r\n    }\r\n\r\n    // Position to the first node\r\n    first() {\r\n        this.current = this.head;\r\n        return this.current;\r\n    }\r\n\r\n    // Position to the last node\r\n    last() {\r\n        this.current = this.tail;\r\n        return this.current;\r\n    }\r\n    \r\n    // Move to the next node\r\n    next() {        \r\n        if (this.current !== null) {\r\n            if (this.current.forwardNode !== null) {\r\n                this.current = this.current.forwardNode;\r\n            }            \r\n        }\r\n        return this.current;\r\n    }\r\n\r\n    // Backup one node\r\n    previous() {\r\n        if (this.current !== null) {\r\n            if (this.current.backwardNode !== null) {\r\n                this.current = this.current.backwardNode;\r\n            }            \r\n        }\r\n        return this.current;      \r\n    }\r\n\r\n    // Inserts a new node after the current node (which node will be the current node after the insertion?)\r\n    insert(subject, amount) {\r\n        const node = new ListNode(subject,amount);\r\n\r\n        if (this.head === null) {\r\n            this.head = node;\r\n            this.tail = node;\r\n        }\r\n        else {\r\n            let current = this.current;\r\n            let next = this.current.forwardNode;          \r\n\r\n            // assign the new node forward and backward pointers\r\n            node.forwardNode =  current.forwardNode !== null ? current.forwardNode : null;             \r\n            node.backwardNode = current;            \r\n\r\n            // re-assign current node forward pointer\r\n            current.forwardNode = node;\r\n\r\n            // re-assign next node backward pointer\r\n            if (next !== null) {\r\n                next.backwardNode = node;   \r\n            }\r\n            else {\r\n                // the new node is the new tail\r\n                this.tail = node;\r\n            }            \r\n        }\r\n\r\n        this.current = node;  \r\n        ++this.size;\r\n\r\n        return node;\r\n    }\r\n\r\n    // Delete the current node (which node will be the current node after the deletion?)\r\n    delete() {\r\n\r\n        if (this.current !== null) {\r\n            let next = this.current.forwardNode;\r\n            let prev = this.current.backwardNode;\r\n\r\n            this.current = prev;\r\n\r\n            if (prev !== null) {    // current node to be deleted is NOT head\r\n                this.current.forwardNode = next;\r\n            }\r\n            else {                  // current node to be deleted is head\r\n                this.head = next;\r\n                this.current = next;\r\n            }\r\n\r\n            if (next !== null) {    // current node to be deleted is NOT tail\r\n                next.backwardNode = prev;\r\n            }\r\n            else {                  // current node to be deleted is tail\r\n                this.tail = prev;\r\n\r\n                if (prev !== null) {    // current node to be deleted is not last node\r\n                    prev.forwardNode = null;\r\n                }            \r\n            }            \r\n            --this.size;\r\n        }\r\n        \r\n        return this.current;\r\n    }\r\n\r\n    // Show the total of all the amounts of all the ListNodes\r\n    showtotal() {\r\n        let current = this.head;\r\n        let total = 0;\r\n\r\n        while (current !== null) {\r\n            total = total + Number(current.amount);\r\n            current = current.forwardNode;\r\n        }        \r\n\r\n        return total;\r\n    }\r\n\r\n    sort(isNumber) {\r\n        this.head = utility.mergeSort(this.head, isNumber);\r\n        this.current = this.head;\r\n        this.tail = this.head;\r\n        \r\n        let current = this.head;\r\n        while (current !== null) {\r\n            this.tail = current;\r\n            current = current.forwardNode;                              \r\n        }                \r\n    }                \r\n}\r\n\r\nconst utility ={\r\n\r\n    // https://www.techiedelight.com/merge-sort/\r\n    // Merge sort is an efficient sorting algorithm which produces a stable sort,\r\n    // which means that if two elements have the same value, they holds same relative\r\n    // position in the output as they did in the input. In other words, the relative \r\n    // order of elements with equal values is preserved in the sorted output. \r\n    // Merge sort is a comparison sort which means that it can sort any input for \r\n    // which a less-than relation is defined.\r\n    // 1. Divde the unsorted array into n subarrays, each of size 1 \r\n    //    (an array of size 1 is considered sorted).\r\n    // 2. Repeatedly merge subarrays to produce new sorted subarrays until\r\n    //    only 1 subarray is left which would be our sorted array.\r\n    // For Non-Cicular Double Linked List\r\n    mergeSort: (source, isNumber) => {\r\n        // https://www.geeksforgeeks.org/merge-sort-for-linked-list/\r\n        // 1) If the head is NULL or there is only one element in the Linked List \r\n        //     then return.\r\n        // 2) Else divide the linked list into two halves.  \r\n        // 3) Sort the two halves a and b.\r\n        // 4) Merge the sorted a and b\r\n        \r\n        // TERMINATION CONDITION\r\n        if (source === null) {\r\n            return source;\r\n        }\r\n\r\n        // BASE CASE\r\n        if (source.forwardNode === null) {\r\n            return source;\r\n        }\r\n        // RECURSION\r\n        else\r\n        {\r\n            const heads = utility.frontBackSplit(source);            \r\n            let front = heads[0];\r\n            let back = heads[1];\r\n\r\n            // Recursively sort the sublists\r\n            front = utility.mergeSort(front, isNumber);\r\n            back = utility.mergeSort(back, isNumber);\r\n\r\n            // merge the two sorted lists together\r\n            return utility.sortedMerge(front, back, isNumber);\r\n            // return back;\r\n        }         \r\n    },\r\n\r\n    sortedMerge: (a, b, isNumber) => { \r\n    \r\n        // TERMINATION CONDITION\r\n        if ((a === null) && (b === null)) {\r\n            return (null);\r\n        }                \r\n\r\n        // BASE CASE\r\n        if (a === null) {\r\n            return b; \r\n        }            \r\n        if (b === null) {\r\n            return a; \r\n        }            \r\n    \r\n        // RECURSION\r\n        // Pick either a or b, and recur\r\n        let result = null;\r\n        if ((isNumber ? Number(a.amount) : a.subject) <= (isNumber ? Number(b.amount) : b.subject)) { \r\n            result = a;\r\n            b.backwardNode = a;\r\n            result.forwardNode = utility.sortedMerge(a.forwardNode, b, isNumber); \r\n        } \r\n        else { \r\n            result = b;\r\n            a.backwardNode = b;\r\n            result.forwardNode = utility.sortedMerge(a, b.forwardNode, isNumber); \r\n        } \r\n        return result; \r\n    }, \r\n\r\n    frontBackSplit: (source) => {\r\n        \r\n        let fast = null;\r\n        let slow = source;\r\n        let back = null;\r\n\r\n        if (slow !== null){\r\n            fast = source.forwardNode;\r\n\r\n            // Advance 'fast' two nodes, and advance 'slow' one node\r\n            while (fast !== null) { \r\n                fast = fast.forwardNode;\r\n\r\n                if (fast !== null) { \r\n                    slow = slow.forwardNode; \r\n                    fast = fast.forwardNode; \r\n                } \r\n            }     \r\n            \r\n            // 'slow' is before the midpoint in the list, so split it in two at that point.\r\n            back = slow.forwardNode\r\n            slow.forwardNode = null;    // break the front tail\r\n\r\n            if (back !== null) {\r\n                back.backwardNode = null;   // break the back head\r\n            }            \r\n        }\r\n       \r\n        return [source, back];\r\n    }\r\n}\r\n\r\nexport default {ListNode, LinkedList, utility};","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { ReactSvgInjector, Mutate } from \"react-svg-injector\";\r\nimport ThemeContext from '../context/ThemeContext';\r\nimport Node from '../components/linkednode';\r\nimport LL from '../scripts/linkedlist';\r\nimport '../CSS/List.css';\r\nimport '../CSS/Theme.css';\r\nimport arrow from '../images/arrow.svg';\r\nimport darrow from '../images/darrow.svg';\r\nimport sortA from '../images/sortA.svg';\r\nimport sortN from '../images/sortN.svg';\r\nimport eye from '../images/eye.svg';\r\nimport sum from '../images/sum.svg';\r\n\r\nfunction List() {\r\n  const [list] = useState(new LL.LinkedList());\r\n  const [train, setTrain] = useState([]);\r\n  const [amount, setAmount] = useState(0);  \r\n  const [subject, setSubject] = useState(\"🛢️\");  \r\n  const [size, setSize] = useState(0);  \r\n  const [capMsg, setCapMsg] = useState(\"\");  \r\n  const [display, setDisplay] = useState(\"\");\r\n  const themeCSS = React.useContext(ThemeContext);\r\n  \r\n  function randomInput(){\r\n    const emoji = [\"🍖\",\"🥔\",\"🥦\",\"🥑\",\"🍓\",\"🥩\",\"🍈\",\"🛢️\",\"🧶\"];\r\n    const rand = Math.round(Math.random()*10%8);\r\n    const rand2 = Math.round(Math.random()*10%8);\r\n    setAmount((rand2+1)*10);\r\n    setSubject(emoji[rand]);\r\n  }\r\n\r\n  // Wrap with useCallback to avoid change on every render\r\n  const renderTrain = useCallback(() => {\r\n\r\n    const newtrain = [];\r\n    let current = list.head;\r\n    let i=0;\r\n    while(current != null) {\r\n      if (current===list.current) {\r\n        switch (true) {\r\n          case i===0:\r\n            newtrain[0]=<Node.NodeHead key={`K${i}`} subject={current.subject} amount={current.amount} nodecss={`node ${themeCSS.activeSelf} ${themeCSS.btnFG}`} trcss={themeCSS.activefill}/>;\r\n            break;\r\n          case i===list.size-1:\r\n            newtrain[i]=<Node.NodeTail key={`K${i}`} subject={current.subject} amount={current.amount} nodecss={`node ${themeCSS.activeSelf} ${themeCSS.btnFG}`} trcss={themeCSS.activefill}/>;\r\n            break;\r\n          default:\r\n            newtrain[i]=<Node.Node key={`K${i}`} subject={current.subject} amount={current.amount} nodecss={`node ${themeCSS.activeSelf} ${themeCSS.btnFG}`} trcss={themeCSS.activefill}/>;\r\n        }\r\n      }\r\n      else {\r\n        switch (true) {\r\n          case i===0:\r\n            newtrain[0]=<Node.NodeHead key={`K${i}`} subject={current.subject} amount={current.amount} nodecss={`node ${themeCSS.btnFG}`} trcss={themeCSS.fill}/>;\r\n            break;\r\n          case i===list.size-1:\r\n            newtrain[i]=<Node.NodeTail key={`K${i}`} subject={current.subject} amount={current.amount} nodecss={`node ${themeCSS.btnFG}`} trcss={themeCSS.fill}/>;\r\n            break;\r\n          default:\r\n            newtrain[i]=<Node.Node key={`K${i}`} subject={current.subject} amount={current.amount} nodecss={`node ${themeCSS.btnFG}`} trcss={themeCSS.fill}/>;\r\n        }        \r\n      }\r\n\r\n      current = current.forwardNode;\r\n      i++;\r\n    }\r\n    \r\n    setTrain(newtrain);\r\n  }, [list, themeCSS]);\r\n\r\n  function addHandler() {\r\n    if (list.size < 20) {      \r\n      list.insert(subject,amount);\r\n      renderTrain();\r\n      randomInput();\r\n\r\n      setSize(list.size);           \r\n    }\r\n\r\n    if (list.size === 20) {            \r\n      setCapMsg(<span><br></br><span style={{color: 'red'}}>MAX</span> capacity is reached!!!</span>);      \r\n    }    \r\n  }\r\n\r\n  function deleteHandler() {\r\n    if (list.size > 0) {\r\n      list.delete();\r\n      renderTrain(); \r\n      randomInput();\r\n\r\n      setSize(list.size);      \r\n    }    \r\n    setCapMsg(\"\");\r\n  }\r\n\r\n  function showHandler() {\r\n    if (list.size > 0) {    \r\n      setDisplay(<span>Current Payload: {list.show().subject}<br></br>Current Quantity: {list.show().amount}</span>);\r\n    }\r\n  }\r\n\r\n  function firstHandler() {\r\n\r\n    if(list.size > 0) {\r\n      \r\n      list.first();\r\n      renderTrain();\r\n      showHandler();\r\n    }\r\n  }\r\n\r\n  function lastHandler() {\r\n\r\n    if(list.size > 0) {\r\n      list.last();\r\n      renderTrain();\r\n      showHandler(); \r\n    }\r\n  }\r\n\r\n  function nextHandler() {\r\n      \r\n      list.next();\r\n      renderTrain();\r\n      showHandler(); \r\n  }\r\n  \r\n  function previousHandler() {      \r\n      list.previous();\r\n      renderTrain();\r\n      showHandler();\r\n  }\r\n  \r\n  function showtotalHandler() {\r\n    if (list.size > 0) {\r\n      setDisplay(`Total: ${list.showtotal()}`);    \r\n    }\r\n  }\r\n  \r\n  function sortAmtHandler() {\r\n    list.sort(true);\r\n    renderTrain();\r\n  }\r\n\r\n  function sortSubjHandler() {\r\n    list.sort(false);\r\n    renderTrain();\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    // Render the display on theme change\r\n    renderTrain();\r\n\r\n  },[renderTrain]);\r\n\r\n  return (\r\n    <div className={`list ${themeCSS.background}`}>              \r\n      <div className={`llMonitor ${themeCSS.foreground}`}>\r\n        <p className=\"llmp1\">Train Size: {size}   {capMsg}</p>\r\n        <div className=\"llMnav\">\r\n          <button className={`llmRbtn llmB1 ${themeCSS.btnFG}`} onClick={() => addHandler()}>\r\n            +\r\n          </button>\r\n          <button className={`llmRbtn llmB2 ${themeCSS.btnFG}`} onClick={() => deleteHandler()}>\r\n            -\r\n          </button>\r\n          <button className={`llmRbtn llmB3 ${themeCSS.btnFG}`} onClick={() => showHandler()}>          \r\n            <ReactSvgInjector src={eye} className=\"llmSVG\" alt=\"Show\">\r\n              <Mutate selector=\"path\" class={themeCSS.fill} />\r\n            </ReactSvgInjector>          \r\n          </button>\r\n          <button className={`llmRbtn llmB4 ${themeCSS.btnFG}`} onClick={() => showtotalHandler()}>\r\n            <ReactSvgInjector src={sum} className=\"llmSVG\" alt=\"Show Total\">\r\n              <Mutate selector=\"path\" class={themeCSS.fill} />\r\n            </ReactSvgInjector>           \r\n          </button>            \r\n          <button className={`llmRbtn llmB5 ${themeCSS.btnFG}`} onClick={() => firstHandler()}>\r\n            <ReactSvgInjector src={darrow} className=\"llmSVG\" alt=\"First\">\r\n              <Mutate selector=\"path\" class={themeCSS.fill} />\r\n            </ReactSvgInjector>           \r\n          </button>\r\n          <button className={`llmRMbtn llmB6 ${themeCSS.btnFG}`} onClick={() => lastHandler()}>\r\n            <ReactSvgInjector src={darrow} className=\"llmSVG\" alt=\"Last\">\r\n              <Mutate selector=\"path\" class={themeCSS.fill} />\r\n            </ReactSvgInjector>           \r\n          </button>\r\n          <button className={`llmRMbtn llmB7 ${themeCSS.btnFG}`} onClick={() => nextHandler()}>\r\n            <ReactSvgInjector src={arrow} className=\"llmSVG\" alt=\"Next\">\r\n              <Mutate selector=\"path\" class={themeCSS.fill} />\r\n            </ReactSvgInjector>           \r\n          </button>\r\n          <button className={`llmRbtn llmB8 ${themeCSS.btnFG}`} onClick={() => previousHandler()}>\r\n            <ReactSvgInjector src={arrow} className=\"llmSVG\" alt=\"Previous\">\r\n              <Mutate selector=\"path\" class={themeCSS.fill} />\r\n            </ReactSvgInjector>          \r\n          </button>\r\n          <button className={`llmRbtn llmB9 ${themeCSS.btnFG}`} onClick={() => sortAmtHandler()}>\r\n            <ReactSvgInjector src={sortN} className=\"llmSVG\" alt=\"Sort Amount\">\r\n              <Mutate selector=\"path\" class={themeCSS.fill} />\r\n            </ReactSvgInjector>              \r\n          </button>\r\n          <button className={`llmRbtn llmB10 ${themeCSS.btnFG}`} onClick={() => sortSubjHandler()}>\r\n            <ReactSvgInjector src={sortA} className=\"llmSVG\" alt=\"Sort Payload\">\r\n              <Mutate selector=\"path\" class={themeCSS.fill} />\r\n            </ReactSvgInjector>                        \r\n          </button>                \r\n        </div>\r\n        <p className=\"llmp2\">Payload:</p>\r\n        <input className={`llmInp llmIn1 ${themeCSS.btnFG}`} type=\"text\" value={subject} onChange={(e) => setSubject(e.target.value)}></input>\r\n        <p className=\"llmp3\"> Quantity:</p>\r\n        <input className={`llmInp llmIn2 ${themeCSS.btnFG}`} type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)}></input>\r\n        <p className=\"llmp4\">{display}</p>\r\n      </div>\r\n      <div className=\"linkedlist\">\r\n        {train}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;","import React from 'react';\r\n\r\nfunction Plate(props) {\r\n  return (\r\n    <div className={props.nodecss} id={`k${props.unique}`} key={`k${props.unique}`}>\r\n      <p>{props.subject}</p> <p>{props.amount} </p>      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default { Plate };","import Linked from './linkedlist.js';\r\n\r\nclass LIFO extends Linked.LinkedList {\r\n\r\n    // head - bottom of stack\r\n    // tail - top of stack\r\n    push(subject, amount) {        \r\n        super.last();\r\n        super.insert(subject, amount);\r\n\r\n        return this.current;\r\n    }\r\n\r\n    pop() {\r\n        super.last();\r\n        super.delete();\r\n\r\n        return this.current;\r\n    }\r\n}\r\n\r\nclass FIFO extends Linked.LinkedList {\r\n\r\n    // head - first in queue\r\n    // tail - last in queue   \r\n    enqueue(subject, amount) {\r\n        super.last();\r\n        super.insert(subject, amount);\r\n\r\n        return this.current;\r\n    }\r\n\r\n    dequeue() {\r\n        super.first();\r\n        super.delete();\r\n\r\n        return this.current;\r\n    }\r\n}\r\n\r\nexport default {FIFO, LIFO};","import React, { useState, useEffect, useCallback } from 'react';\r\nimport ThemeContext from '../context/ThemeContext';\r\nimport PL from '../components/stackable';\r\nimport LI from '../scripts/linearobj';\r\nimport '../CSS/Linear.css';\r\n\r\nfunction Linear() {\r\n  const [ssize, setSsize] = useState(0);\r\n  const [qsize, setQsize] = useState(0);\r\n  const [stack, setStack] = useState(new LI.LIFO());\r\n  const [queue, setQueue] = useState(new LI.FIFO());\r\n  const [dqueue, setDqueue] = useState([]);\r\n  const [sobj, setSOBJ] = useState([]);\r\n  const [qobj, setQOBJ] = useState([]);\r\n  const [isNews, setIsNewS] = useState(false);\r\n  const [isNewq, setIsNewQ] = useState(false);\r\n  const themeCSS = React.useContext(ThemeContext);\r\n\r\n  const renderStack = useCallback(() => {\r\n    const linearobj = [];\r\n    let current = stack.head;\r\n    let i=0;\r\n    while(current != null) {      \r\n      linearobj[i] = <PL.Plate key={`k${i}`} nodecss={`stackable ${themeCSS.stack}`} subject={current.subject} amount={current.amount} unique={i}/>;\r\n      current = current.forwardNode;\r\n      i++;\r\n    }\r\n\r\n    // Change the latest stackable style\r\n    if(isNews && (linearobj.length>0)) {\r\n      const prop = linearobj[linearobj.length-1].props;\r\n      linearobj[linearobj.length-1] = <PL.Plate key={`k${i}`} nodecss={`stackable drop-in ${themeCSS.stack} ${themeCSS.nstack}`} subject={prop.subject} amount={prop.amount} unique={prop.unique}/>;   \r\n    }\r\n\r\n    return linearobj\r\n  }, [themeCSS, stack, isNews]);\r\n\r\n  const renderQueue = useCallback(() => {\r\n    const linearobj = [];\r\n    let current = queue.head;\r\n    let i=0;\r\n    while(current != null) {      \r\n      linearobj[i] = <PL.Plate key={`k${i}`} nodecss={`stackable ${themeCSS.stack}`} subject={current.subject} amount={current.amount} unique={i}/>;\r\n      current = current.forwardNode;\r\n      i++;\r\n    }\r\n\r\n    // Change the latest stackable style\r\n    if(isNewq && (linearobj.length>0)) {\r\n      const prop = linearobj[linearobj.length-1].props;\r\n      linearobj[linearobj.length-1] = <PL.Plate key={`k${i}`} nodecss={`stackable drop-in ${themeCSS.stack} ${themeCSS.nstack}`} subject={prop.subject} amount={prop.amount} unique={prop.unique}/>;   \r\n    }    \r\n\r\n    return linearobj\r\n  }, [themeCSS, queue, isNewq]);\r\n\r\n  function clearLIFOHandler() {\r\n    setStack(new LI.LIFO());\r\n    setSOBJ([]);\r\n    setSsize(0);  \r\n  }\r\n\r\n  function clearFIFOHandler() {\r\n    setQueue(new LI.FIFO());\r\n    setQOBJ([]);\r\n    setDqueue([]);  \r\n    setQsize(0);  \r\n  }\r\n\r\n  useEffect(() => {\r\n    setSOBJ(renderStack());\r\n    setQOBJ(renderQueue()); \r\n  }, [renderStack, renderQueue]);\r\n\r\n  function pushHandler(sub, amt) {\r\n  \r\n    if (stack.size < 20) {           \r\n      stack.push(sub,amt);                  \r\n      setSOBJ(renderStack());            \r\n      setSsize(ssize+1); \r\n      setIsNewS(true);\r\n    }\r\n  }\r\n\r\n  function popHandler() {\r\n\r\n    if (stack.size > 0) {\r\n      stack.pop();\r\n      setSOBJ(renderStack());  \r\n      setSsize(ssize-1);\r\n      setIsNewS(false);       \r\n    }\r\n  }\r\n\r\n  function enqueueHandler(sub, amt) {\r\n\r\n    if (queue.size < 20) {\r\n      const dq = dqueue.slice();\r\n      if(dq.length > 0) {\r\n        const prop = dq[dq.length-1].props;\r\n        dq.pop();        \r\n        queue.enqueue(prop.subject,prop.amount);\r\n        setDqueue(dq);\r\n      }\r\n      else {        \r\n        queue.enqueue(sub,amt);\r\n      }      \r\n                  \r\n      setQOBJ(renderQueue());      \r\n      setQsize(qsize+1);\r\n      setIsNewQ(true);       \r\n    }       \r\n  }\r\n\r\n  function dequeueHandler() {\r\n\r\n    if (queue.size > 0) {\r\n      const q = qobj.slice();\r\n      const dq = dqueue.slice();\r\n      queue.dequeue();\r\n      dq.unshift(q[0]);\r\n      q.shift();\r\n      setQOBJ(q);  \r\n      setQsize(qsize-1);    \r\n      setDqueue(dq);\r\n      setIsNewQ(false);       \r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={`linearobj ${themeCSS.background}`}>\r\n      <div className=\"scol\">\r\n        <div className={`sMoniter ${themeCSS.foreground}`}>\r\n          <p className=\"smoniterP1\">Stack (LIFO)</p>\r\n          <button className={`smbtn smoniterB3 ${themeCSS.btnFG}`} onClick={() => clearLIFOHandler()}>\r\n            Clear\r\n          </button>          \r\n          <button className={`smbtn smoniterB1 ${themeCSS.btnFG}`} onClick={() => pushHandler(\"\",ssize)}>\r\n            Push\r\n          </button>\r\n          <button className={`smbtn smoniterB2 ${themeCSS.btnFG}`} onClick={() => popHandler()}>\r\n            Pop\r\n          </button>\r\n        </div>        \r\n        <div className={`sbox ${themeCSS.container}`}>\r\n          {sobj}\r\n        </div>        \r\n      </div>\r\n\r\n      <div className=\"scol\">\r\n        <div className={`sMoniter ${themeCSS.foreground}`}>\r\n          <p className=\"smoniterP1\">Queue (FIFO)</p>\r\n          <button className={`smbtn smoniterB3 ${themeCSS.btnFG}`} onClick={() => clearFIFOHandler()}>\r\n            Clear\r\n          </button>           \r\n          <button className={`smbtn smoniterB1 ${themeCSS.btnFG}`} onClick={() => enqueueHandler(\"\",qsize)}>\r\n          Enqueue\r\n          </button>\r\n          <button className={`smbtn smoniterB2 ${themeCSS.btnFG}`} onClick={() => dequeueHandler()}>\r\n          Dequeue\r\n          </button>     \r\n        </div>        \r\n        <div className={`sbox ${themeCSS.container}`}>\r\n          {qobj}\r\n        </div>        \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Linear;","import React from 'react';\r\nimport ThemeContext, { themes }  from '../context/ThemeContext';\r\nimport Home from '../components/Home';\r\nimport DOM from '../components/pagenav';\r\nimport Bank from './bank';\r\nimport Place from './location';\r\nimport Game from './Game';\r\nimport List from './list';\r\nimport Linear from './linear';\r\n\r\nclass AppsController extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activeApp: <Home />,\r\n            activePage: \"Home\",\r\n            activeTheme: themes.dark,\r\n        };\r\n    } \r\n\r\n    toggleTheme = () => {\r\n        this.setState({\r\n            activeTheme: this.state.activeTheme === themes.dark ? themes.light : themes.dark,\r\n        });        \r\n    }\r\n\r\n    pageClick(e) {\r\n        let app;\r\n        let page = e.target.alt;\r\n\r\n        switch (e.target.alt) {\r\n            case \"Home\":\r\n                app = <Home />;\r\n                break;            \r\n            case \"Banking\":\r\n                app = <Bank />;\r\n                break;\r\n            case \"Demographic\":\r\n                app = <Place />;\r\n                break;\r\n            case \"Tic Tac Toe\":\r\n                app = <Game />;\r\n                break;\r\n            case \"Linked List\":\r\n                app = <List />;\r\n                break;\r\n            case \"Stack and Queue\":\r\n                app = <Linear />;\r\n                break;\r\n            case \"Settings\":\r\n                app = this.state.activeApp;\r\n                page = this.state.activePage;\r\n                this.toggleTheme();\r\n                break;                   \r\n            default:                                                \r\n        }\r\n\r\n        this.setState({        \r\n            activeApp: app,\r\n            activePage: page,\r\n        });        \r\n    }\r\n\r\n    render() {\r\n        const switchon = false;\r\n\r\n        return (\r\n            <div>\r\n                <ThemeContext.Provider value={this.state.activeTheme}>\r\n                    <DOM.NavHeader applabel={this.state.activePage}/>                \r\n                    {this.state.activeApp}            \r\n                    <DOM.NavFooter on={switchon} onClick={(e) => this.pageClick(e)}/>\r\n                </ThemeContext.Provider>\r\n            </div>\r\n        );\r\n\r\n    }    \r\n}\r\n\r\nexport default AppsController;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './containers/controller';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}